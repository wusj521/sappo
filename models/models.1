package models

import (
	"fmt"
	"os"
	"path"
	"sappo/saprfc"
	"sappo/utils"
	"strconv"
	"time"

	"github.com/Unknwon/com"
	"github.com/astaxie/beego/orm"
	_ "github.com/mattn/go-sqlite3"
	//saprfc "github.com/sap/gorfc/gorfc"
)

const (
	_DB_NAME        = "data/sappo.db"
	_SQLITE3_DRIVER = "sqlite3"
)

//字体首写字母大写
type Sappo struct {
	Id        int64
	Username  string    //已批准人
	Bedat     time.Time `orm:"index"` //采购日期
	Maktx     string    `orm:"index"` //物料名称
	Name1     string    `orm:"index"` //供应商描述
	Menge1    string    //本次量
	Netpr1    string    //本次单价
	Zgys05k   string    //价格类型
	Zgys0502  string    //到站
	Name      string    //送货地点
	Eindt     time.Time //到货日期
	Vtext     string    //付款方式
	Zgys081   string    //上次单价
	Zgys0901  time.Time //上次时
	Zgys071   string    //库存量
	Zgys091   string    //日耗量
	Zgztl1    string    //在途量
	Zgys06701 string    //掌握量
	Zgys06901 string    //掌握天数
	Zgys03    string    //是否招标
	Ebeln     string    `orm:"index"` //采购单号
	Namelast  string    //经办人
	Udate     time.Time //审批日期及时间
	Prgco     string    `orm:"index"` //审批代码
	Frget     string    `orm:"index"` //状态批准尚未完全生效
	Frggr     string    //审批组+批准策略为索引
	Frgsx     string    //批准策略
	Flag      string    `orm:"index"` //审批标识
	//Uptime    time.Time //上传时间
	//Sptime time.Time //审批时间
}

// 分类
type Category struct {
	Id              int64
	Title           string    `orm:"size(18)"`
	Created         time.Time `orm:"index"`
	Views           int64     `orm:"index"`
	TopicTime       time.Time `orm:"index"`
	TopicCount      int64
	TopicLastUserId int64
	Flag            string `orm:"index"`
}

// 文章
type Topic struct {
	Id              int64
	Uid             int64
	Title           string
	Content         string `orm:"size(5000)"`
	Attachment      string
	Created         time.Time `orm:"index"`
	Updated         time.Time `orm:"index"`
	Views           int64     `orm:"index"`
	Author          string
	ReplyTime       time.Time `orm:"index"`
	ReplyCount      int64
	ReplyLastUserId int64
}

//用户
type User struct {
	Id    int64
	Uname string
	Pwd   string
	Tel   string `orm:"index"`
	Prgco string //审批代码

	Frggr string //批准尚未完全生效+审批组+批准策略为索引
	Frgsx string //批准策略

}

func RegisterDB() {
	// 检查数据库文件
	if !com.IsExist(_DB_NAME) {
		os.MkdirAll(path.Dir(_DB_NAME), os.ModePerm)
		os.Create(_DB_NAME)
	}

	// 注册模型
	orm.RegisterModel(new(Category), new(Topic), new(User), new(Sappo))
	// 注册驱动（“sqlite3” 属于默认注册，此处代码可省略）
	//	orm.RegisterDriver(_SQLITE3_DRIVER, orm.DR_Sqlite)
	// 注册默认数据库
	orm.RegisterDataBase("default", _SQLITE3_DRIVER, _DB_NAME, 10)
}

//以上是注册DB和自动建表

//
func AddCategory(name string) error {
	o := orm.NewOrm()

	cate := &Category{
		Title:     name,
		Created:   time.Now(),
		TopicTime: time.Now(),
	}
	//检查数据
	qs := o.QueryTable("category")
	err := qs.Filter("title", name).One(cate)
	if err == nil {
		return err
	}
	//插入数据
	_, err = o.Insert(cate)
	if err != nil {
		return err
	}

	return nil
}

func DeleteCategory(id string) error {
	cid, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		return err
	}

	o := orm.NewOrm()

	cate := &Category{Id: cid}
	_, err = o.Delete(cate)
	return err
}

func GetAllCategories() ([]*Category, error) {
	o := orm.NewOrm()

	cates := make([]*Category, 0)

	qs := o.QueryTable("category")

	//	_, err := qs.All(&cates)
	_, err := qs.OrderBy("flag", "id").All(&cates) //("-flag"）倒序排列

	return cates, err
}

func GetAllSappos() ([]*Sappo, error) {
	o := orm.NewOrm()

	cates := make([]*Sappo, 0)

	qs := o.QueryTable("sappo")

	//	_, err := qs.All(&cates)
	_, err := qs.OrderBy("flag", "id").All(&cates) //("-flag"）倒序排列

	return cates, err
}

//Topic
func GetDaisp(tid string) (*Sappo, error) {
	tidNum, err := strconv.ParseInt(tid, 10, 64)
	if err != nil {
		return nil, err
	}

	o := orm.NewOrm()

	Sappo := new(Sappo)

	qs := o.QueryTable("Sappo")
	err = qs.Filter("id", tidNum).One(Sappo)
	if err != nil {
		return nil, err
	}

	//	topic.Views++
	//	_, err = o.Update(Categories)
	return Sappo, nil
}

func ModifyDaisp(tid, flag string) error {
	tidNum, err := strconv.ParseInt(tid, 10, 64)
	if err != nil {
		return err
	}

	o := orm.NewOrm()
	Sappo := &Sappo{Id: tidNum}
	if o.Read(Sappo) == nil {
		Sappo.Flag = flag
		//		topic.Content = content
		//Sappo.Sptime = time.Now()
		o.Update(Sappo)
	}
	return nil
}

func GetUser(uname, pwdmd5 string) (*User, error) {
	//tidNum, err := strconv.ParseInt(tid, 10, 64)
	//if err != nil {
	//	return nil, err
	//}
	var err error
	o := orm.NewOrm()

	User := new(User)
	qs := o.QueryTable("User")
	err = qs.Filter("uname", uname).Filter("pwd", pwdmd5).One(User)
	if err != nil {
		return nil, err
	}

	return User, err
}

func InsertUser(uname, pwd, tel string) error {
	//tidNum, err := strconv.ParseInt(tid, 10, 64)
	//if err != nil {
	//	return nil, err
	//}
	o := orm.NewOrm()
	pwdmd5 := utils.Md5(pwd)
	cate := &User{
		Uname: uname,
		Pwd:   pwdmd5,
		Tel:   tel,
		//	TopicTime: time.Now(),
	}
	//检查数据
	var err error
	qs := o.QueryTable("user")
	err = qs.Filter("uname", uname).One(cate)
	if err == nil {
		return err
	}
	//插入数据
	_, err = o.Insert(cate)
	if err != nil {
		return err
	}

	return nil
}

func GetSappo() error {

	saprfc.Connect()
	//连接SAP
	/*var SAPconnection *saprfc.Connection
	arg.String("table", "T_ZMM_EKPO", "read from table", time.Second*1)
	arg.String("dest", "", "destination system", time.Second*0)
	arg.String("client", "100", "client", time.Second*0)
	arg.String("user", "wusj", "username", time.Second*0)
	arg.String("pass", "189189", "password", time.Second*0)
	arg.String("lang", "en", "language", time.Second*0)
	arg.String("host", "192.168.100.131", "SAP server", time.Second*0)
	arg.String("sysnr", "00", "SysNr", time.Second*0)
	//	arg.String("router", "/H/123.125.21.51/H/", "SAP router", time.Second*1)
	arg.Parse()

	SAPconnection, _ = saprfc.ConnectionFromParams(saprfc.ConnectionParameter{
		Dest:   arg.Get("dest").(string),
		Client: arg.Get("client").(string),
		User:   arg.Get("user").(string),
		Passwd: arg.Get("pass").(string),
		Lang:   arg.Get("lang").(string),
		Ashost: arg.Get("host").(string),
		Sysnr:  arg.Get("sysnr").(string),
		//		Saprouter: arg.Get("router").(string),
	})
	//连接SAP END*/

	params := map[string]interface{}{
		"I_FRGCO": "R3",
		//		"GLTRP":      "20170829",
		//"MANTR_MARK": "X",
		//		"DELIMITER":   ";",
		//		"NO_DATA":     "",
		//		"ROWSKIPS":    0,
		//		"ROWCOUNT":    5,
	}
	r, err := saprfc.SAPconnection.Call("ZMM_PO_RELEASE", params)
	if err != nil {
		fmt.Println(err)
		return err
	}

	//	var ret []string

	/*
		echoStruct := r["DATA"].([]interface{})
		//	echoStruct := r["FIELDS"].([]interface{})
		for _, value := range echoStruct {
			values := value.(map[string]interface{})
			for _, val := range values {
				valstr := strings.Split(fmt.Sprint("%s", val), ";")
				ret = append(ret, strings.TrimSpace(valstr[1]))
			}
		}
		return ret
	*/
	//var b []byte
	//var s []string
	echoStruct := r["T_ZMM_EKPO"].([]interface{})
	for _, value := range echoStruct {
		values := value.(map[string]interface{})
		//		fmt.Println(len(values)) //打印行数
		//		fmt.Println(values["MATNR"])//打印某个字段的值
		//	delete(values, "MAKTX")
		//		fmt.Println(values["MATNR"])
		//		fmt.Println(values["MATNR"])

		ebeln := values["EBELN"]
		/*efor key, val := range values {
			//valstr := strings.Split(fmt.Sprint("%s", val), ";")
			if key == "USERNAME" {
				fmt.Println(key)
				fmt.Println(val)
				s = append(s, val.(string))
			}
		}
		//wausr := values["USERNAME"].(string)
		b := []byte(s[0])
		usr, _ := text.GbkToUtf8(b)*/

		/*s := "GBK 与 UTF-8 编码转换测试"
		gbk, err := Utf8ToGbk([]byte(s))
		if err != nil {
			fmt.Println(err)
		} else {
			fmt.Println(string(gbk))
		}

		utf8, err := GbkToUtf8(gbk)
		if err != nil {
			fmt.Println(err)
		} else {
			fmt.Println(string(utf8))
		}
		*/

		o := orm.NewOrm()
		cate := &Sappo{

			Username: values["USERNAME"].(string), //已批准人
			//Username:  string(usr),
			Bedat:     time.Now(),                  //采购日期
			Maktx:     values["MAKTX"].(string),    //物料名称
			Name1:     values["NAME1"].(string),    //供应商描述
			Menge1:    values["MENGE"].(string),    //本次量
			Netpr1:    values["NETPR"].(string),    //本次单价
			Zgys05k:   values["ZGYS05K"].(string),  //价格类型
			Zgys0502:  values["ZGYS0502"].(string), //到站
			Name:      values["NAME"].(string),     //送货地点
			Eindt:     time.Now(),                  //到货日期
			Vtext:     values["VTEXT"].(string),    //付款方式
			Zgys081:   values["ZGYS081"].(string),  //上次单价
			Zgys0901:  time.Now(),                  //上次时
			Zgys071:   values["ZGYS071"].(string),  //库存量
			Zgys091:   values["ZGYS091"].(string),  //日耗量
			Zgztl1:    values["ZGZTL1"].(string),   //在途量
			Zgys06701: values["ZGYS0671"].(string), //掌握量
			Zgys06901: values["ZGYS0691"].(string), //掌握天数
			Zgys03:    values["ZGYS03"].(string),   //是否招标
			Ebeln:     ebeln.(string),              //采购订单 .(string)是类型转换
			Namelast:  values["NAMELAST"].(string), //经办人
			Udate:     time.Now(),                  //审批日期及时间
			Prgco:     "",                          //审批代码
			Frget:     values["FRGET"].(string),    //状态批准尚未完全生效
			Frggr:     values["FRGGR"].(string),    //审批组+批准策略为索引
			Frgsx:     values["FRGSX"].(string),    //批准策略

			//currentTime := time.Now().Local()
			//timeStr := currentTime.Format("2006-01-02 15:04:05.000")

		}
		//检查数据
		//qs := o.QueryTable("category")
		err := o.QueryTable("sappo").Filter("ebeln", ebeln).One(cate)
		if err == orm.ErrNoRows { //没找到相同数据 insert DB
			//插入数据
			_, err = o.Insert(cate)
			//_, err = o.Update(cate)
			if err != nil {
				return err
			}
		}
	}
	saprfc.Close()
	//SAPconnection.Close()
	return nil
}
