package main

import (
	"fmt"

	saprfc "github.com/sap/gorfc/gorfc"
)

var SAPconnection *saprfc.Connection

func abapSystem() saprfc.ConnectionParameter {
	return saprfc.ConnectionParameter{
		Dest:   "aa",
		Client: "xx",
		User:   "xx",
		Passwd: "xx",
		Lang:   "ZH",
		Ashost: "192.168.0.1",
		Sysnr:  "00",
		//		Saprouter: "/H/123.125.21.51/H/",
	}
}

func connect() error {
	var err error
	fmt.Println(abapSystem()) //wusj
	SAPconnection, err = saprfc.ConnectionFromParams(abapSystem())

	return err
}

func close() {
	SAPconnection.Close()
}

func request() []string {
	params := map[string]interface{}{
		"QUERY_TABLE": "USR01", //usr01
		"DELIMITER":   ";",
		"NO_DATA":     "",
		"ROWSKIPS":    0,
		"ROWCOUNT":    0,
	}
	r, err := SAPconnection.Call("RFC_READ_TABLE", params)
	if err != nil {
		fmt.Println(err)
		return []string{}
	}

	var ret []string
	/*
		echoStruct := r["DATA"].([]interface{})
		//	echoStruct := r["FIELDS"].([]interface{})
		for _, value := range echoStruct {
			values := value.(map[string]interface{})
			for _, val := range values {
				valstr := strings.Split(fmt.Sprint("%s", val), ";")
				ret = append(ret, strings.TrimSpace(valstr[1]))
			}
		}
		return ret
	*/
	echoStruct := r["DATA"].([]interface{})
	for _, value := range echoStruct {
		values := value.(map[string]interface{})
		for _, val := range values {
			fmt.Println(val)
		}
	}

	return ret
}

func main() {
	connect()

	user := request()

	for _, usr := range user {
		fmt.Println(usr)
	}

	close()
}
